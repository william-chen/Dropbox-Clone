{
  "name": "json-over-tcp",
  "version": "0.3.2",
  "description": "TCP server/client messaging in JSON",
  "main": "index.js",
  "dependencies": {
    "its": "~1.0.0"
  },
  "devDependencies": {
    "grunt": "~0.3.15"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ozanturgut/json-over-tcp.git"
  },
  "keywords": [
    "tcp",
    "jot",
    "json",
    "json-over-tcp",
    "server",
    "client"
  ],
  "author": {
    "name": "Ozan Turgut",
    "email": "ozanturgut@gmail.com",
    "url": "http://oztu.org/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ozanturgut/json-over-tcp/blob/master/LICENSE-MIT"
    }
  ],
  "readme": "# jot (json-over-tcp) [![Build Status](https://secure.travis-ci.org/ozanturgut/json-over-tcp.png?branch=master)](http://travis-ci.org/ozanturgut/json-over-tcp)\r\n\r\nNode.js TCP server/client messaging in JSON.\r\n\r\nThis library provides a server and a socket class (with APIs that are very similar to the net package in Node.js) which communicate\r\nby sending each other JSON messages.\r\n\r\nYou \"write\" JSON objects to the socket, and the \"data\" events on the other end of the socket emits the JSON object you wrote.\r\n\r\n## A Short Illustration\r\n``` javascript\r\n// assume that I have a jot server listening somewhere and I created a connection to it called \"connection\"\r\nvar someObject = {\r\n  \"this property is null\": null,\r\n  1928: 3734,\r\n  turtle: {\r\n    neck: \"sweater\"\r\n  }\r\n};\r\n\r\nconnection.write(someObject);\r\n// Whatever is listening to this connection on the server-side will now recieve a \"data\" event with an object that\r\n// has the same values as \"someObject\".\r\n```\r\n\r\n\r\n## A Real Example\r\n``` javascript\r\n// This script will output \"Client's question: Hello, world?\" and \"Server's answer: 42\" in alternating order\r\n// every second until the script is stopped.\r\n\r\nvar someRandomPort = 8099,\r\n  jot = require('json-over-tcp');\r\n\r\nvar server = jot.createServer(someRandomPort);\r\nserver.on('listening', createConnection);\r\nserver.on('connection', newConnectionHandler);\r\n\r\n// Triggered whenever something connects to the server\r\nfunction newConnectionHandler(socket){\r\n  // Whenever a connection sends us an object...\r\n  socket.on('data', function(data){\r\n    // Output the question property of the client's message to the console\r\n    console.log(\"Client's question: \" + data.question);\r\n\r\n    // Wait one second, then write an answer to the client's socket\r\n    setTimeout(function(){\r\n      socket.write({answer: 42});\r\n    }, 1000);\r\n  });\r\n};\r\n\r\n// Creates one connection to the server when the server starts listening\r\nfunction createConnection(){\r\n  // Start a connection to the server\r\n  var socket = jot.connect(someRandomPort, function(){\r\n    // Send the initial message once connected\r\n    socket.write({question: \"Hello, world?\"});\r\n  });\r\n  \r\n  // Whenever the server sends us an object...\r\n  socket.on('data', function(data){\r\n    // Output the answer property of the server's message to the console\r\n    console.log(\"Server's answer: \" + data.answer);\r\n    \r\n    // Wait one second, then write a question to the socket\r\n    setTimeout(function(){\r\n      // Notice that we \"write\" a JSON object to the socket\r\n      socket.write({question: \"Hello, world?\"});\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n// Start listening\r\nserver.listen(someRandomPort);\r\n```\r\n\r\n## API\r\nThe factory functions below behave similar to node's net package (but they return jot versions of the server or socket).\r\n### ```jot.createServer([options], [connectionListener])```\r\nSee [```net.createServer([options], [connectionListener])```](http://nodejs.org/api/net.html#net_net_createserver_options_connectionlistener).\r\n### ```jot.connect(options, [connectionListener])```\r\nSee [```net.connect(options, [connectionListener])```](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener).\r\n### ```jot.createConnection(options, [connectionListener])```\r\nSee [```net.createConnection(options, [connectionListener])```](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener).\r\n### ```jot.connect(port, [host], [connectListener])```\r\nSee [```net.connect(port, [host], [connectListener])```](http://nodejs.org/api/net.html#net_net_connect_port_host_connectlistener).\r\n### ```jot.createConnection(options, [connectionListener])```\r\nSee [```net.createConnection(port, [host], [connectListener])```](http://nodejs.org/api/net.html#net_net_connect_port_host_connectlistener).\r\n### ```jot.connect(path, [connectListener])```\r\nSee [```net.connect(path, [connectListener])```](http://nodejs.org/api/net.html#net_net_connect_path_connectlistener).\r\n### ```jot.createConnection(path, [connectListener])```\r\nSee [```net.createConnection(path, [connectListener])```](http://nodejs.org/api/net.html#net_net_connect_path_connectlistener).\r\n### ```jot.createProtocol(stream)```\r\nFactory function for creating a jot protocol object.\r\n### ```jot.createSocket([options])```\r\nFactory function for creating a jot socket.\r\n\r\n### ```jot.Server```\r\n>The server API is the same as the [```Server``` API in the native 'net' module](http://nodejs.org/api/net.html#net_class_net_server) with the following differences:\r\n##### ```Event: 'connection'``` \r\nEmits a jot socket (see it's API below) instead of a plain tcp socket.\r\n\r\n### ```jot.Socket```\r\n>The socket API is the same as the [```Socket``` API in the native 'net' module](http://nodejs.org/api/net.html#net_class_net_socket) with the following differences:\r\n##### ```Event: 'data'```\r\nEmits a JSON object which was sent by the other end of the socket.\r\n##### ```write(obj)```\r\nSends an object to the other end of the socket. This method doesn't accept any of the other parameters as the plain tcp socket.\r\n\r\n### ```jot.Protocol```\r\n> The protocol object is what serializes/deserializes JSON data over the wire.\r\n##### new Protocol(stream)\r\nTakes in a [```Stream```](http://nodejs.org/api/stream.html) object and reads/writes JSON objects using it's a simple  protocol (a protocol signature, message length, and stringified JSON).\r\n##### ```write(obj)``` \r\nWrites an object which can be stringified to the stream.\r\n##### ```on``` \r\nBind to an event (```'data'``` is the only one ever emitted).\r\n##### ```removeListener``` \r\nRemove a bound listener.\r\n##### ```Event: 'data'``` \r\nEmits a JSON object whenever a stream message is recieved.\r\n\r\n## Protocol\r\nIf you would like to implement the protocol yourself, the server will expect the following in order in the byte stream:\r\n\r\n1. 16-bit unsigned little-endian integer with 206 as the value. This is the protocol signature, if a message is sent without this signature a protocol error will be raised.\r\n2. A 32-bit unsigned little-endian integer with the length of the message being sent as the value.\r\n3. A UTF-8 string with the stringified JSON as the value (the message).\r\n",
  "readmeFilename": "README.md",
  "_id": "json-over-tcp@0.3.2",
  "dist": {
    "shasum": "a2f1145e6fc45949fc73cd0b738a03004bea72f3",
    "tarball": "http://registry.npmjs.org/json-over-tcp/-/json-over-tcp-0.3.2.tgz"
  },
  "_from": "json-over-tcp@",
  "_npmVersion": "1.2.2",
  "_npmUser": {
    "name": "ozanturgut",
    "email": "ozanturgut@gmail.com"
  },
  "maintainers": [
    {
      "name": "ozanturgut",
      "email": "ozanturgut@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "a2f1145e6fc45949fc73cd0b738a03004bea72f3",
  "_resolved": "https://registry.npmjs.org/json-over-tcp/-/json-over-tcp-0.3.2.tgz"
}
